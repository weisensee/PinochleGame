packet specifications.txt
Lucas Weisensee		Pinochle Game Server
Packet and Client Communication Specifications for the Desktop Pinochle Server

	Outlines and details the order and data types send/received with pinochle playing clients

	Each type of query/response has a message code that corresponds to the exact type of message it is

	the code is an UNSIGNED CHAR at the head of each packet
		ODD codes correspond to server messages
		EVEN codes correspond to client messages

***************************************************************************************
MESSAGE TITLE:
***************************************************************************************
TITLE 		:: CODE  ::	DESCRIPTION
MSG 		::	0	 :: Error/Message to client
S_STATUS	::	1	 :: Server Status
CON_TYPE	::	2	 :: Client Connection Type
R_PNAME 	::	3	 :: Request Player Name
PNAME 		::	4	 :: Player Name
G_LIST	 	::	5	 ::	Active Game List
G_CHOICE 	::	6	 :: Game Choice (connect to)
G_CON_STAT	::	7	 :: Game Connection Status
BEC_PLAYER	::	8	 :: Become Player
CREATE_G	::	10	 :: Create Game
RESTART_G 	::	11	 :: Restart query
RESTART_ANS ::	12	 :: Restart answer
N_GQUERY 	::	13	 :: Query For new Game Creation Info
N_GINFO 	::	14	 :: New Game Creation Info
BEC_OBS		::  16	 :: Become Observer
STAT_QUERY	::	18	 :: Status query of current game
G_STATUS	::	19	 :: Status of current game

***************************************************************************************
MESSAGE DESCRIPTION:
***************************************************************************************
CODE ::	DESCRIPTION
0	 :: Error/Message to client
		(string) Simple error message/notification to print out to client or user

1	 :: Server Acknowledges Connection and Readiness to Continue: [ServerStatus]
		ServerStatus: (int)
			0: server not ready
			1: server ready

2	 :: Client Connection Type - Client sends (int) response:
		Response:
			0: Quit/Disconnect/None of the above
			1: Request the list of active games
			2: Live Game Data entry mode
			3: Initiates database access mode
			4: console echo testing

3	 :: Request Player Name

4	 :: Player Name
		(string) player name

5	 ::	Active Game List
		1: Char array of games separated by "/": game1/game2/game3/*
			game: X^gameID^gameName^gamecreator^playera^playerb^playern
				X:status
					P: playing
					W: waiting
					F: full
				gameID: (int) ID number for specific game
				gameName: string
				playerNames: string
			
6	 :: Game Choice (connect to) - Client sends choice about which game to play: (int) game ID
		(int) x ['^'] (int) n ['^']
		x^n:  join game x as n user
		x == 0: create new game
			n = game name

7	 :: Game Connection Status
		(int) a ['^'] (int) b ['^']
		a: connection status code
			0: connection failed
			1: connection successful

		b: player/observer number
			n: player/observer number

8	 :: Become player
		(int) a ['^']
		a: desired player number

10	 :: Create Game
		(int) n ['^'] %s ['^']: create new game with n users and %s Gamename, '^': char delimiter between data values
			^: char == '^'
			n: unsigned char
			%s: New Game Name: '\0' delimited string 

11	 :: Restart query
		(char) ['^'] : notifies the player they have the chance to restart

12	 :: Restart answer
		bool 0: don'restart
			 1: do restart

13	 :: Query For new Game Creation Info
		(char) ['^'] : queries user for new game info

14	 :: New Game Creation Info
			(Type)'^'(number of players)'^'(number of observers)'^'(winning score)'^'(game name)
		char array in the following order:
		Game Type: (char) 'P' or 'E' (pinochle or euchre)
		Number of Players: (char) number of players to set the game up with
		Number of Observers: (char) number of observers to limit for the game
		Winning Score: (int) number of points to win
		Game Name: (char []) name for current game, null terminated

16	 :: Become Observer 
		(char) ['^']

18	 :: Status query of current game
		(optional char[]) gameName

19	 :: Status of current game
		(status)['^'](game name)
		(char) status
		(char *) gameName